cmake_minimum_required(VERSION 2.8.3)
project(crazyflie_tools)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  crazyflie_cpp
)

# Enable C++11
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

## System dependencies are found with CMake's conventions
find_package(Boost REQUIRED COMPONENTS program_options REQUIRED)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES crazyflie
  CATKIN_DEPENDS
    crazyflie_cpp
#  DEPENDS system_lib
)

###########
## Build ##
###########

include_directories(
  ${catkin_INCLUDE_DIRS}
)

## List of executable names to generate
set(executables
  scan
  listParams
  listLogVariables
  reboot
  ## add more as needed
)
# manually change depending on if there's unique dependencies to add to an individual executable
set(HAS_INDEPENDENT_LIBRARIES FALSE)
## add executables (loop through)
foreach(executable ${executables})
	add_executable(${executable} src/${executable}.cpp)
	## Specify libraries to link a library or executable target against
	target_link_libraries(${executable}
	    ${catkin_LIBRARIES}
	    ${Boost_LIBRARIES}
	    usb-1.0
	  )
endforeach()

if(HAS_INDEPENDENT_LIBRARIES)
  ## Declare a cpp executable
  add_executable(scan
    src/scan.cpp
  )

  ## Specify libraries to link a library or executable target against
  target_link_libraries(scan
    ${catkin_LIBRARIES}
    ${Boost_LIBRARIES}
  )

  ### listParams
  add_executable(listParams
    src/listParams.cpp
  )
  target_link_libraries(listParams
    ${catkin_LIBRARIES}
    ${Boost_LIBRARIES}
  )

  ### listLogVariables
  add_executable(listLogVariables
    src/listLogVariables.cpp
  )
  target_link_libraries(listLogVariables
    ${catkin_LIBRARIES}
    ${Boost_LIBRARIES}
  )

  ### reboot
  add_executable(reboot
    src/reboot.cpp
  )
  target_link_libraries(reboot
    ${catkin_LIBRARIES}
    ${Boost_LIBRARIES}
  )
endif()
#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS crazyflie crazyflie_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_crazyflie.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
